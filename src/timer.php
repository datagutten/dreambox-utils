<?php


namespace datagutten\dreambox\web;


use datagutten\dreambox\web\exceptions\DreamboxException;
use datagutten\dreambox\web\exceptions\DreamboxHTTPException;
use datagutten\dreambox\web\objects;
use FileNotFoundException;

class timer extends common
{
    /**
     * @var bool Show debugging information
     */
    public bool $debug = false;
    /**
     * @var timer[] Timers on dreambox
     */
    public array $timers;

    /**
     * timer constructor.
     * @param $dreambox_ip
     * @param string $channel_file Channel file generated by save_channels.php
     * @throws FileNotFoundException Channel list file not found
     * @throws DreamboxException Channel list file empty
     */
    function __construct($dreambox_ip, string $channel_file)
    {
        parent::__construct($dreambox_ip);
        $this->load_channel_list($channel_file);
        $this->timers = $this->get_timers();
    }

    /**
     * @param string $channel_name Channel name
     * @throws DreamboxException Channel id not found
     * @return string Channel id
     */
    function channel_id(string $channel_name): string
    {
        $channel_id = array_search($channel_name, $this->channels);
        if ($channel_id === false)
            throw new DreamboxException(sprintf('Channel id not found for %s', $channel_name));
        else
            return $channel_id;
    }

    /**
     * Resolve a channel id to channel name
     * @param string $channel_id Channel id
     * @return string
     * @throws DreamboxException
     */
    function channel_id_reverse(string $channel_id): string
    {
        if(!isset($this->channels[$channel_id]))
            throw new DreamboxException('No channel found for id '.$channel_id);
        else
            return $this->channels[$channel_id];
    }

    /**
     * @param string $channel_id Dreambox channel id
     * @param int $begin Recording start timestamp
     * @param int $end Recording end timestamp
     * @param string $name Recording name
     * @param string $description Recording description
     * @return string Response from dreambox
     * @throws DreamboxHTTPException
     * @throws DreamboxException Error adding timer
     */
    public function add_timer(string $channel_id, int $begin, int $end, string $name, string $description = ''): string
    {
        $timer = new objects\timer();
        $timer->channel_id = $channel_id;
        $timer->time_begin = $begin;
        $timer->time_end = $end;
        $timer->name = $name;
        $timer->description = $description;

        return $this->add_timer_obj($timer);
    }

    /**
     * Add a timer to the dreambox
     * @param objects\timer $timer Timer object
     * @return string Response from dreambox
     * @throws DreamboxException Error adding timer
     */
    public function add_timer_obj(objects\timer $timer, $extra_args = []): string
    {
        $data = $timer->array();
        if(!empty($extra_args))
            $data = array_merge($data, $extra_args);
        $response = $this->post('web/timerchange', [], $data);
        $state = objects\result::parse($response->body);
        if ($state->state === false)
            throw new DreamboxException($state->state_text);
        else
        {
            $this->timers[] = $timer;
            return $state->state_text;
        }
    }

    /**
     * Replace an existing timer with another
     * @param objects\timer $old Existing timer to be replaced
     * @param objects\timer $new New timer
     * @return string Response from dreambox
     * @throws DreamboxException
     */
    public function replace_timer(objects\timer $old, objects\timer $new): string
    {
        $new->delete_old = true;
        $data = [
            'channelOld' => $old->channel_id,
            'beginOld' => $old->time_begin,
            'endOld' => $old->time_end
        ];

        $text = $this->add_timer_obj($new, $data);

        //Remove old timer from cache
        foreach ($this->timers as $key => $timer)
        {
            if ($timer === $old)
            {
                unset($this->timers[$key]);
                break;
            }
        }

        $this->timers[] = $new; //Add the new timer to cache
        return $text;
    }

    public function delete_timer(objects\timer $timer): string
    {
        $data = [
            'sRef' => $timer->channel_id,
            'begin' => $timer->time_begin,
            'end' => $timer->time_end,
        ];

        $response = $this->post('web/timerdelete', [], $data);
        $state = objects\result::parse($response->body);
        if ($state->state === false)
            throw new DreamboxException($state->state_text);
        else
        {
            //Remove timer from cache
            foreach ($this->timers as $key => $timer_iter)
            {
                if ($timer_iter === $timer)
                {
                    unset($this->timers[$key]);
                    break;
                }
            }
        }
        return $state->state_text;
    }

    /**
     * Get timers from dreambox
     * @return objects\timer[]
     * @throws DreamboxException
     */
    public function get_timers(): array
    {
        $response = $this->get('web/timerlist');
        return objects\timer::parse($response->body);
    }

    /**
     * Check if the dreambox has a timer
     * @param string $channel Channel name
     * @param int $start Start timestamp
     * @param int $end End timestamp
     * @param bool $partial Return partial timer
     * @return objects\timer|false
     * @throws DreamboxException
     */
    public function has_timer(string $channel, int $start, int $end, bool $partial=false)
    {
        $channel_id = $this->channel_id($channel);
        if(empty($this->timers))
            $this->timers = $this->get_timers();

        foreach($this->timers as $key=>$timer)
        {
            if($timer->channel_id != $channel_id)
                continue;

            if($timer->time_begin > $end || $timer->time_end < $start)
                continue; //Timer is outside queried range

            if($partial)
                return $timer;

            if($timer->time_begin > $start)
            {
                if($this->debug)
                    printf("Recording start: %s after program start: %s\n", date('Y-m-d H:i', $timer->time_begin), date('Y-m-d H:i', $start));
                continue;
            }
            elseif($this->debug)
                printf("Recording start: %s program start: %s\n", date('Y-m-d H:i', $timer->time_begin), date('Y-m-d H:i', $start));

            if($timer->time_end < $end)
                continue;

            return $timer;
        }
        return false;
    }
}