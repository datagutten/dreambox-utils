<?php


namespace datagutten\dreambox\web;


use datagutten\dreambox\web\exceptions\DreamboxException;
use datagutten\dreambox\web\exceptions\DreamboxHTTPException;
use datagutten\dreambox\web\objects;
use FileNotFoundException;
use InvalidArgumentException;

class timer extends common
{
    /**
     * @var bool Show debugging information
     */
    public $debug = false;
    /**
     * @var timer[] Timers on dreambox
     */
    public $timers;

    /**
     * timer constructor.
     * @param $dreambox_ip
     * @param string $channel_file Channel file generated by save_channels.php
     * @throws FileNotFoundException Channel list file not found
     * @throws DreamboxException Channel list file empty
     */
    function __construct($dreambox_ip, string $channel_file)
    {
        parent::__construct($dreambox_ip);
        $this->load_channel_list($channel_file);
        $this->timers = $this->get_timers();
    }

    public $timer_template=array(
        'sRef'=>false,
        'begin'=>false,
        'end'=>false,
        'name'=>false,
        'description'=>'',
        'dirname'=>'/media/hdd/movie/',
        'tags'=>'',
        'afterevent'=>'3',
        'eit'=>'0',
        'disabled'=>'0',
        'justplay'=>'0',
        'repeated'=>'0',
        'deleteOldOnSave'=>'0',
        'sessionid'=>'0');

    /**
     * @param string $channel_name Channel name
     * @throws DreamboxException Channel id not found
     * @return string Channel id
     */
    function channel_id(string $channel_name)
    {
        $channel_id = array_search($channel_name, $this->channels);
        if ($channel_id === false)
            throw new DreamboxException(sprintf('Channel id not found for %s', $channel_name));
        else
            return $channel_id;
    }

    /**
     * @param string $channel_id Channel id
     * @return mixed
     * @throws DreamboxException
     */
    function channel_id_reverse(string $channel_id)
    {
        if(!isset($this->channels[$channel_id]))
            throw new DreamboxException('No channel found for id '.$channel_id);
        else
            return $this->channels[$channel_id];
    }

    /**
     * @param string $channel_id Dreambox channel id
     * @param int $begin Recording start timestamp
     * @param int $end Recording end timestamp
     * @param string $name Recording name
     * @param string $description Recording description
     * @return string Response from dreambox
     * @throws DreamboxHTTPException
     * @throws DreamboxException Error adding timer
     */
    public function add_timer(string $channel_id, int $begin, int $end, string $name, $description='')
    {
        if(!preg_match('/[0-9A-F:]{30}/', $channel_id))
            throw new InvalidArgumentException('Invalid channel id: '.$channel_id);
        $timer = $this->timer_template;
        $timer['sRef'] = $channel_id;
        $timer['begin'] = $begin;
        $timer['end'] = $end;
        $timer['name'] = $name;
        if(!empty($description))
            $timer['description'] = $description;

        $response = $this->session->post('web/timerchange', [], $timer);
        if(!$response->success)
            throw new DreamboxHTTPException($response);
        $state = objects\result::parse($response->body);
        if($state->state===false)
            throw new DreamboxException($state->state_text);
        else
            return $state->state_text;
        //TODO: Add timer to timers property
    }

    /**
     * Get timers from dreambox
     * @return objects\timer[]
     * @throws DreamboxHTTPException
     */
    public function get_timers()
    {
        $response = $this->session->get('web/timerlist');
        if(!$response->success)
            throw new DreamboxHTTPException($response);
        return objects\timer::parse($response->body);
    }
    /**
     * @param string $channel
     * @param int $start
     * @param int $end
     * @param int $margin
     * @return objects\timer|false
     * @throws DreamboxHTTPException
     */
    public function has_timer(string $channel, int $start, int $end, $margin = 10)
    {
        if(empty($this->timers))
            $this->timers = $this->get_timers();

        foreach($this->timers as $timer)
        {
            if($timer->channel_name != $channel)
                continue;
            if(date('Y-m-d', $timer->time_begin)!=date('Y-m-d', $start))
                continue;

            if($timer->time_begin > $start)
            {
                if($this->debug)
                    printf("Recording start: %s after program start: %s\n", date('Y-m-d H:i', $timer->time_begin), date('Y-m-d H:i', $start));
                continue;
            }
            elseif($this->debug)
                printf("Recording start: %s program start: %s\n", date('Y-m-d H:i', $timer->time_begin), date('Y-m-d H:i', $start));

            if($timer->time_end < $end)
                continue;

            return $timer;
        }
        return false;
    }
}