<?php


namespace datagutten\dreambox\web;


use datagutten\dreambox\web\exceptions\DreamboxException;
use datagutten\dreambox\web\exceptions\DreamboxHTTPException;
use FileNotFoundException;
use InvalidArgumentException;
use WpOrg\Requests;

class common
{
    public string $dreambox_ip;

    /**
     * @var Requests\Session
     */
    private Requests\Session $session;

    /**
     * @var string[] Array with channel names as values and dreambox channel ids as keys
     */
    public array $channels;

    /**
     * common constructor.
     * @param string $dreambox_ip IP to dreambox
     * @throws DreamboxHTTPException Unable to connect to dreambox
     * @throws DreamboxException Dreambox not found
     */
    function __construct(string $dreambox_ip)
    {
        if(empty($dreambox_ip))
            throw new InvalidArgumentException('Dreambox IP empty');
        $this->dreambox_ip = $dreambox_ip;
        $this->session = new Requests\Session('http://' . $dreambox_ip . '/', [], [], ['timeout' => 60]);
        $response = $this->get('');

        if(strpos($response->body, 'Dreambox WebControl')===false)
            throw new DreamboxException(sprintf('Dreambox not found at %s', $response->url));
    }

    /**
     * Load channel list from JSON
     * @param string $channel_file Channel file generated by save_channels.php
     * @throws FileNotFoundException Channel list file not found
     * @throws DreamboxException Channel list file empty
     */
    function load_channel_list(string $channel_file)
    {
        if(!file_exists($channel_file))
            throw new FileNotFoundException($channel_file);
        $data = file_get_contents($channel_file);
        $this->channels = json_decode($data, true);
        if(empty($this->channels))
            throw new DreamboxException('Channel list empty');
    }

    /**
     * @param string $url URL to request
     * @param array $headers Extra headers to send with the request
     * @param array|string|null $data Data to send either as a query string for GET/HEAD requests, or in the body for POST requests
     * @param string $type HTTP request type (use \WpOrg\Requests\Requests constants)
     * @param array $options Options for the request (see {@see \WpOrg\Requests\Requests::request()})
     * @return Requests\Response

     * @throws DreamboxException On invalid URLs (`nonhttp`)
     * @throws DreamboxHTTPException On HTTP errors
     */
    protected function request(string $url, array $headers = [], $data = [], string $type = Requests\Requests::GET, array $options = []): Requests\Response
    {
        try
        {
            $response = $this->session->request($url, $headers, $data, $type, $options);
        }
        catch (Requests\Exception $e)
        {
            throw new DreamboxException($e->getMessage(), $e->getCode(), $e);
        }
        if (!$response->success)
            throw new DreamboxHTTPException($response);
        return $response;
    }

    /**
     * Send a GET request
     *
     * @param string $url URL to request
     * @param array $headers Extra headers to send with the request
     * @param array $options Options for the request (see {@see \WpOrg\Requests\Requests::request()})
     * @return Requests\Response
     *
     * @throws DreamboxException On invalid URLs (`nonhttp`)
     * @throws DreamboxHTTPException On HTTP errors
     */
    public function get(string $url, array $headers = [], array $options = []): Requests\Response
    {
        return $this->request($url, $headers, null, Requests\Requests::GET, $options);
    }

    /**
     * Send a POST request
     *
     * @param string $url URL to request
     * @param array $headers Extra headers to send with the request
     * @param array|string|null $data Data to send either as a query string for GET/HEAD requests, or in the body for POST requests
     * @param array $options Options for the request (see {@see \WpOrg\Requests\Requests::request()})
     * @return Requests\Response
     *
     * @throws DreamboxException On invalid URLs (`nonhttp`)
     * @throws DreamboxHTTPException On HTTP errors
     * @see \WpOrg\Requests\Session::request()
     */
    public function post(string $url, array $headers = [], $data = [], array $options = []): Requests\Response
    {
        return $this->request($url, $headers, $data, Requests\Requests::POST, $options);
    }
}